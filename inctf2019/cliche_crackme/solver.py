from z3 import *
s = Solver()
n = 37
X = [BitVec('x_%s' % i, 8) for i in range(n)]
sum = 3504
sumbuf = 126144
resultOfSum = [0xd7, 0xcc, 0xdd, 0xcf, 0xe4, 0xbd, 0xd1, 0x9d, 0xdd, 0xdc, 0xc8, 0xd1, 0xce, 0x9a, 0x9a, 0xc8, 0xd5, 0x99, 0xdd, 0xc8, 0x99, 0xcf, 0xc8, 0xe0, 0x99, 0xdb, 0xd4, 0xc8, 0xe0, 0x9d, 0xdc, 0xc8, 0xd2, 0xdd, 0xa8, 0xe6, 0xd1, 0xe2, 0xd4, 0xe9, 0xc2, 0xd6, 0xa2, 0xe2, 0xe1, 0xcd, 0xd6, 0xd3, 0x9f, 0x9f, 0xcd, 0xda, 0x9e, 0xe2, 0xcd, 0x9e, 0xd4, 0xcd, 0xe5, 0x9e, 0xe0, 0xd9, 0xcd, 0xe5, 0xa2, 0xe1, 0xcd, 0xd7, 0xe2, 0xad, 0xeb, 0xd7, 0xc9, 0xde, 0xb7, 0xcb, 0x97, 0xd7, 0xd6, 0xc2, 0xcb, 0xc8, 0x94, 0x94, 0xc2, 0xcf, 0x93, 0xd7, 0xc2, 0x93, 0xc9, 0xc2, 0xda, 0x93, 0xd5, 0xce, 0xc2, 0xda, 0x97, 0xd6, 0xc2, 0xcc, 0xd7, 0xa2, 0xe0, 0xda, 0xef, 0xc8, 0xdc, 0xa8, 0xe8, 0xe7, 0xd3, 0xdc, 0xd9, 0xa5, 0xa5, 0xd3, 0xe0, 0xa4, 0xe8, 0xd3, 0xa4, 0xda, 0xd3, 0xeb, 0xa4, 0xe6, 0xdf, 0xd3, 0xeb, 0xa8, 0xe7, 0xd3, 0xdd, 0xe8, 0xb3, 0xf1, 0xe1, 0xba, 0xce, 0x9a, 0xda, 0xd9, 0xc5, 0xce, 0xcb, 0x97, 0x97, 0xc5, 0xd2, 0x96, 0xda, 0xc5, 0x96, 0xcc, 0xc5, 0xdd, 0x96, 0xd8, 0xd1, 0xc5, 0xdd, 0x9a, 0xd9, 0xc5, 0xcf, 0xda, 0xa5, 0xe3, 0xcf, 0xe3, 0xaf, 0xef, 0xee, 0xda, 0xe3, 0xe0, 0xac, 0xac, 0xda, 0xe7, 0xab, 0xef, 0xda, 0xab, 0xe1, 0xda, 0xf2, 0xab, 0xed, 0xe6, 0xda, 0xf2, 0xaf, 0xee, 0xda, 0xe4, 0xef, 0xba, 0xf8, 0xbc, 0x88, 0xc8, 0xc7, 0xb3, 0xbc, 0xb9, 0x85, 0x85, 0xb3, 0xc0, 0x84, 0xc8, 0xb3, 0x84, 0xba, 0xb3, 0xcb, 0x84, 0xc6, 0xbf, 0xb3, 0xcb, 0x88, 0xc7, 0xb3, 0xbd, 0xc8, 0x93, 0xd1, 0x9c, 0xdc, 0xdb, 0xc7, 0xd0, 0xcd, 0x99, 0x99, 0xc7, 0xd4, 0x98, 0xdc, 0xc7, 0x98, 0xce, 0xc7, 0xdf, 0x98, 0xda, 0xd3, 0xc7, 0xdf, 0x9c, 0xdb, 0xc7, 0xd1, 0xdc, 0xa7, 0xe5, 0xa8, 0xa7, 0x93, 0x9c, 0x99, 0x65, 0x65, 0x93, 0xa0, 0x64, 0xa8, 0x93, 0x64, 0x9a, 0x93, 0xab, 0x64, 0xa6, 0x9f, 0x93, 0xab, 0x68, 0xa7, 0x93, 0x9d, 0xa8, 0x73, 0xb1, 0xe7, 0xd3, 0xdc, 0xd9, 0xa5, 0xa5, 0xd3, 0xe0, 0xa4, 0xe8, 0xd3, 0xa4, 0xda, 0xd3, 0xeb, 0xa4, 0xe6, 0xdf, 0xd3, 0xeb, 0xa8, 0xe7, 0xd3, 0xdd, 0xe8, 0xb3, 0xf1, 0xd2, 0xdb, 0xd8, 0xa4, 0xa4, 0xd2, 0xdf, 0xa3, 0xe7, 0xd2, 0xa3, 0xd9, 0xd2, 0xea, 0xa3, 0xe5, 0xde, 0xd2, 0xea, 0xa7, 0xe6, 0xd2, 0xdc, 0xe7, 0xb2, 0xf0, 0xc7, 0xc4, 0x90, 0x90, 0xbe, 0xcb, 0x8f, 0xd3, 0xbe, 0x8f, 0xc5, 0xbe, 0xd6, 0x8f, 0xd1, 0xca, 0xbe, 0xd6, 0x93, 0xd2, 0xbe, 0xc8, 0xd3, 0x9e, 0xdc, 0xcd, 0x99, 0x99, 0xc7, 0xd4, 0x98, 0xdc, 0xc7, 0x98, 0xce, 0xc7, 0xdf, 0x98, 0xda, 0xd3, 0xc7, 0xdf, 0x9c, 0xdb, 0xc7, 0xd1, 0xdc, 0xa7, 0xe5, 0x96, 0x96, 0xc4, 0xd1, 0x95, 0xd9, 0xc4, 0x95, 0xcb, 0xc4, 0xdc, 0x95, 0xd7, 0xd0, 0xc4, 0xdc, 0x99, 0xd8, 0xc4, 0xce, 0xd9, 0xa4, 0xe2, 0x62, 0x90, 0x9d, 0x61, 0xa5, 0x90, 0x61, 0x97, 0x90, 0xa8, 0x61, 0xa3, 0x9c, 0x90, 0xa8, 0x65, 0xa4, 0x90, 0x9a, 0xa5, 0x70, 0xae, 0x90, 0x9d, 0x61, 0xa5, 0x90, 0x61, 0x97, 0x90, 0xa8, 0x61, 0xa3, 0x9c, 0x90, 0xa8, 0x65, 0xa4, 0x90, 0x9a, 0xa5, 0x70, 0xae, 0xcb, 0x8f, 0xd3, 0xbe, 0x8f, 0xc5, 0xbe, 0xd6, 0x8f, 0xd1, 0xca, 0xbe, 0xd6, 0x93, 0xd2, 0xbe, 0xc8, 0xd3, 0x9e, 0xdc, 0x9c, 0xe0, 0xcb, 0x9c, 0xd2, 0xcb, 0xe3, 0x9c, 0xde, 0xd7, 0xcb, 0xe3, 0xa0, 0xdf, 0xcb, 0xd5, 0xe0, 0xab, 0xe9, 0xa4, 0x8f, 0x60, 0x96, 0x8f, 0xa7, 0x60, 0xa2, 0x9b, 0x8f, 0xa7, 0x64, 0xa3, 0x8f, 0x99, 0xa4, 0x6f, 0xad, 0xd3, 0xa4, 0xda, 0xd3, 0xeb, 0xa4, 0xe6, 0xdf, 0xd3, 0xeb, 0xa8, 0xe7, 0xd3, 0xdd, 0xe8, 0xb3, 0xf1, 0x8f, 0xc5, 0xbe, 0xd6, 0x8f, 0xd1, 0xca, 0xbe, 0xd6, 0x93, 0xd2, 0xbe, 0xc8, 0xd3, 0x9e, 0xdc, 0x96, 0x8f, 0xa7, 0x60, 0xa2, 0x9b, 0x8f, 0xa7, 0x64, 0xa3, 0x8f, 0x99, 0xa4, 0x6f, 0xad, 0xc5, 0xdd, 0x96, 0xd8, 0xd1, 0xc5, 0xdd, 0x9a, 0xd9, 0xc5, 0xcf, 0xda, 0xa5, 0xe3, 0xd6, 0x8f, 0xd1, 0xca, 0xbe, 0xd6, 0x93, 0xd2, 0xbe, 0xc8, 0xd3, 0x9e, 0xdc, 0xa7, 0xe9, 0xe2, 0xd6, 0xee, 0xab, 0xea, 0xd6, 0xe0, 0xeb, 0xb6, 0xf4, 0xa2, 0x9b, 0x8f, 0xa7, 0x64, 0xa3, 0x8f, 0x99, 0xa4, 0x6f, 0xad, 0xdd, 0xd1, 0xe9, 0xa6, 0xe5, 0xd1, 0xdb, 0xe6, 0xb1, 0xef, 0xca, 0xe2, 0x9f, 0xde, 0xca, 0xd4, 0xdf, 0xaa, 0xe8, 0xd6, 0x93, 0xd2, 0xbe, 0xc8, 0xd3, 0x9e, 0xdc, 0xab, 0xea, 0xd6, 0xe0, 0xeb, 0xb6, 0xf4, 0xa7, 0x93, 0x9d, 0xa8, 0x73, 0xb1, 0xd2, 0xdc, 0xe7, 0xb2, 0xf0, 0xc8, 0xd3, 0x9e, 0xdc, 0xdd, 0xa8, 0xe6, 0xb3, 0xf1, 0xbc]

#func1
k = 0
for i in range(37):
    for j in range(i+1, 37):
        s.add(X[i] + X[j] == resultOfSum[k])
        k += 1
        if (k == 666):
            break

#func2
z = 0
for i in range(37):
    z += X[i]
s.add(z == sum)

#func3
v = 0
l = 0
for i in range(37):
    for j in range(i+1, 37):
        v += X[i] + X[j]
        l += 1
        if (l == 666):
            break
s.add(v == sumbuf)

if s.check() == sat:
    flag = ""
    m = s.model()
    for i in range(n):
        flag += chr(m[X[i]].as_long())
    print(flag)
else:
    print("unsat")
